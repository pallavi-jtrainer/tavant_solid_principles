Day 1:
---------
SOLID priciples:
5 guidelines to create clean, maintainable and flexible code
1. Single Responsibility Principle (S)
2. Open-closed Priciple
3. Liskov Substitution Principle
4. Interface Segregation Principle
5. Dependency inversion Principle


Code Smells

Technical Debt:
1. Intentional
2. Unintentional
3. Bit Rot

To reduce TD:
1. SOLID Priciples
2. Refactoring
3. Adequate testing
4. Track TD
5. Perform Code Reviews
6. Allocate time for refactoring
---------------------------------------------------------------------

Single Responsibility Principle
 -> each class, method or module should do one thing perfectly

Responsibilities:
1. Validation -> OrderValidationService
2. Persistence -> OrderRepository
3. Notification -> OrderNotificationService
4. Business Logic -> OrderService
5. API Endpoint exposure -> OrderController
____________________________________________________________________________________________

Day 2:
OCP
-> Open Closed Principle



Exercise:
Add classes for all different processors + a new class to handle CrptoCurrency
Add test cases for checkout service
Integrate this into the OrderController

2.
Add a OrderDto and Mapper
Add a FestivalDiscount Service
Add a OrderValidatorService

3. Add an InvoiceService that generate Pdf invoice
   Add a NotificationService with a notification sender for email, sms, push and WhatsApp



--------------------------------
Case study hands on
1. Create a new class SlackNotificationService
2. Register with Factory
3. update LoanService
4. Implement an Overdue reminder + overdue amount calculator














